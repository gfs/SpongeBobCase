@page "/"
@using SpongeBobCase.Extensions
@using System.Text
@inject NavigationManager NavManager
@using Microsoft.AspNetCore.WebUtilities

 <div class="form-group">
     <input class="form-control input-lg" type="text" @bind="@input" @bind:event="oninput" placeholder="@placeholder"/>
 </div>

<pre>
    @output
</pre>

@code{
    protected override void OnParametersSet()
    {
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("Say", out var say))
        {
            input = say;
        }
        else
        {
            input = placeholder;
        }
        base.OnParametersSet();
    }

        const int maxLengthOfLine = 100;
    const string placeholder = "Enter text to convert.";
    string input = string.Empty;
    string output => asciiBob.Replace("MESSAGEBOX", asciiMessageBoxify(input.ToSpongeBobCase()));

    string asciiMessageBoxify(string stringToBox)
    {
       string topAndBottom = $" {string.Concat(Enumerable.Repeat('-', Math.Min(100,stringToBox.Length)+2))} ";
        StringBuilder middle = new();
        if (stringToBox.Length > maxLengthOfLine)
        {
            string remainingToBox = stringToBox;
            while (remainingToBox.Length > 0)
            {
                middle.Append('|');
                middle.Append(' ');
                if (remainingToBox.Length > maxLengthOfLine)
                {
                    if (char.IsLetterOrDigit(remainingToBox[maxLengthOfLine-1]) && char.IsLetterOrDigit(remainingToBox[maxLengthOfLine]))
                    {
                        middle.Append(remainingToBox[..(maxLengthOfLine-1)]);
                        if (char.IsLetterOrDigit(remainingToBox[maxLengthOfLine-2]))
                        {
                            middle.Append('-');
                        }
                        else
                        {
                            middle.Append(' ');
                        }
                        remainingToBox = remainingToBox[(maxLengthOfLine-1)..];
                    }
                    else
                    {
                        middle.Append(remainingToBox[..maxLengthOfLine]);
                        remainingToBox = remainingToBox[maxLengthOfLine..];
                    }
                }
                else
                {
                    middle.Append(remainingToBox.PadRight(maxLengthOfLine));
                    remainingToBox = string.Empty;
                }
                
                middle.Append(' ');
                middle.Append('|');
                middle.Append('\n');
            }
        }
        else
        {
            middle.Append($"| {stringToBox} |\n");
        }
       
        return $"{topAndBottom}\n{middle}{topAndBottom}\n";
    }
    
    const string asciiBob = @"
MESSAGEBOX
*
      *
 ----//-------
 \..C/--..--/ \   `A
  (@ )  ( @) \  \// |w
   \          \  \---/
    HGGGGGGG    \    /`
    V `---------`--'
        <<    <<
       ###   ###";

}